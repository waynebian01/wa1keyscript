local healthList = {}

-- 收集队伍成员的生命值
for i = 1, 4 do
    local unit = "party" .. i
    if UnitExists(unit) and not UnitIsDeadOrGhost(unit) and UnitIsFriend("player", unit) then
        local health = UnitHealth(unit) / UnitHealthMax(unit) * 100 -- 计算生命值百分比
        table.insert(healthList, {unitID = unit, health = health})
    end
end

-- 添加玩家自己的生命值
local playerHealth = UnitHealth("player") / UnitHealthMax("player") * 100
table.insert(healthList, {unitID = "player", health = playerHealth})

-- 按生命值排序
table.sort(healthList, function(a, b) return a.health < b.health end)

-- 返回生命值第二低的角色
if #healthList >= 2 then
    local secondLowestUnit = healthList[2].unitID
    -- 找到该unit对应的索引
    if secondLowestUnit == "player" then
        return 1 -- 玩家自身返回1
    else
        for i = 1, 4 do
            if UnitIsUnit(secondLowestUnit, "party" .. i) then
                return i + 1 -- 返回2-5表示队伍中的单位
            end
        end
    end
end

local healthList = {}

-- 收集队伍成员的生命值
for i = 1, 4 do
    local unit = "party" .. i
    if UnitExists(unit) and not UnitIsDeadOrGhost(unit) and UnitIsFriend("player", unit) then
        local health = UnitHealth(unit) / UnitHealthMax(unit) * 100 -- 计算生命值百分比
        table.insert(healthList, {unitID = unit, health = health})
    end
end

-- 添加玩家自己的生命值
local playerHealth = UnitHealth("player") / UnitHealthMax("player") * 100
table.insert(healthList, {unitID = "player", health = playerHealth})

-- 按生命值排序
table.sort(healthList, function(a, b) return a.health < b.health end)

-- 获取生命值第二低的单位的生命值百分比
if #healthList >= 2 then
    index = healthList[2].health -- 返回第二低单位的生命值百分比
    return index
end

return 0 -- 如果没有找到第二低的角色

